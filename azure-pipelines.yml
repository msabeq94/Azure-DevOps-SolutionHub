trigger:
- none

parameters:
- name: Action
  displayName: Action
  type: string
  default: 'plan'
  values:
    - 'plan'
    - 'apply -auto-approve'
    - 'destroy -auto-approve'
  
- name: country_code
  displayName: country_code
  type: string
  values:
    - 'GB-Commercial'
    - 'GB-Official'
    - 'IT-Commercial'
    - 'IE-Commercial'
    - 'ES-Commercial'
    - 'PT-Commercial'
    - 'AL-Commercial'

- name: customer_domain_name
  displayName: "Customer Domain Name"
  type: string
  default: ""

- name: customer_subscription_owner_firstname
  displayName: "Customer Subscription Owner First Name"
  type: string
  default: " "
- name: customer_subscription_owner_lastname
  displayName: "Customer Subscription Owner Last Name"
  type: string
  default: " "

- name: customer_subscription_contributor_firstname
  displayName: "Customer Subscription Contributor First Name"
  type: string
  default: " "
- name: customer_subscription_contributor_lastname
  displayName: "Customer Subscription Contributor Last Name"
  type: string
  default: " "

- name: customer_security_contact_email
  displayName: "Customer Security Contact Email"
  type: string
  default: ""
- name: customer_service_health_contact_email
  displayName: "Customer Service Health Contact Email"
  type: string
  default: ""
- name: customer_budget_contact_email
  displayName: "Customer Budget Contact Email"
  type: string
  default: ""

- name: budgeted_amount
  displayName: "Budgeted Amount"
  type: number
  default: "0"

- name: vodafone_support_primary_L2_username
  displayName: "Vodafone Support Primary L2 Username"
  type: string
  default: " "
- name: vodafone_support_primary_L2_useremail
  displayName: "Vodafone Support Primary L2 User Email"
  type: string
  default: " "

- name: customer_tenant_id
  displayName: "Customer Tenant ID"
  type: string
  default: ""
- name: customer_subscription_id
  displayName: "Customer Subscription ID"
  type: string
  default: ""

- name: customer_client_id
  displayName: "Customer Client ID"
  type: string
  default: ""
- name: customer_client_secret
  displayName: "Customer Client Secret"
  type: string
  default: ""

variables:
  action: ${{ parameters.Action }}

stages:
- stage: IntializingProviders
  condition: eq(variables.Action, 'apply -auto-approve')
  displayName: 'Initializing Providers'
  jobs:
    - job: 'InitializingProviders'
      displayName: 'Initializing Providers'
      pool: 'DevOps-Agents-VMS'
      steps:
        - script: |
            az login --service-principal -u ${{parameters.customer_client_id}} -p ${{parameters.customer_client_secret}} --tenant ${{parameters.customer_tenant_id}}
            az account set -s ${{parameters.customer_subscription_id}}

            Rproviders=("Microsoft.Management" "Microsoft.KeyVault" "Microsoft.Network" "Microsoft.Advisor" "Microsoft.Storage" "Microsoft.OperationalInsights" "Microsoft.PolicyInsights" "Microsoft.Kusto" "Microsoft.App" "Microsoft.ManagedIdentity" "Microsoft.Security" "Microsoft.ADHybridHealthService" "microsoft.insights")
            for Rprovider in "${Rproviders[@]}"; do
              az provider register --namespace $Rprovider
            done

            for Rprovider in "${Rproviders[@]}"; do
              RegistrationState=$(az provider show --namespace $Rprovider --query 'registrationState' --output tsv)
              while [ "$RegistrationState" != "Registered" ]; do
                sleep 5
                RegistrationState=$(az provider show --namespace $Rprovider --query 'registrationState' --output tsv)
              done
              echo "$Rprovider registered."
            done
   
- stage: TerraformRun
  displayName: 'Terraform Run'
  dependsOn: IntializingProviders
  condition: always()
  pool: 'DevOps-Agents-VMS'
  jobs:
  - job: ManualApprovalResourcesStep
    condition: and(always(), eq(variables.Action, 'destroy -auto-approve'))
    displayName: "Review and Approve Resources Cleanup"
    pool: server 
    steps:
      - task: ManualValidation@1
        timeoutInMinutes: 5
        inputs:
          notifyUsers: ""
          instructions: "Are you sure, you want to delete the configuration?"
          onTimeout: 'reject'

  - job: TerraformJob
    condition: |
      or(
        succeeded('ManualApprovalResourcesStep'),
        not(failed('ManualApprovalResourcesStep'))
      )   
    displayName: 'Terraform Job'
    dependsOn: ManualApprovalResourcesStep 

    steps:
    - script: |
            cd cmdb/customer

            sed -i "s/cststate/${{ parameters.customer_domain_name }}/g" main.tf

            terraform init
            terraform workspace select ${{parameters.customer_domain_name}} || terraform workspace new ${{parameters.customer_domain_name}} 
            
            terraform ${{ parameters.Action }} \
              -var country_code=${{ parameters.country_code }} \
              -var company_name=${{ parameters.customer_domain_name }} \
              -var customer_subscription_owner_firstname=${{ parameters.customer_subscription_owner_firstname }} \
              -var customer_subscription_owner_lastname=${{ parameters.customer_subscription_owner_lastname }} \
              -var customer_security_contact_email=${{ parameters.customer_security_contact_email }} \
              -var customer_service_health_contact_email=${{ parameters.customer_service_health_contact_email }} \
              -var customer_budget_contact_email=${{ parameters.customer_budget_contact_email }} \
              -var customer_subscription_id=${{ parameters.customer_subscription_id }} \
              -var customer_client_id=${{ parameters.customer_client_id }} \
              -var customer_tenant_id=${{ parameters.customer_tenant_id }} \
              -var customer_client_secret=${{ parameters.customer_client_secret }} \
              -var budget_amount=${{ parameters.budgeted_amount }} \
              -var vodafone_support_primary_L2_username=${{ parameters.vodafone_support_primary_L2_username }} \
              -var vodafone_support_primary_L2_useremail=${{ parameters.vodafone_support_primary_L2_useremail }} \
              -var customer_subscription_contributor_firstname=${{ parameters.customer_subscription_contributor_firstname }} \
              -var customer_subscription_contributor_lastname=${{ parameters.customer_subscription_contributor_lastname }}

- stage: KeyVaultIAMSettings
  jobs:
    - job: UpdateIAMAccess
      steps:
        - script: |
            az login --service-principal -u ${{parameters.customer_client_id}} -p ${{parameters.customer_client_secret}} --tenant ${{parameters.customer_tenant_id}}
            az account set -s ${{parameters.customer_subscription_id}}

            GroupObjectIdKey=$(az ad group show --group "vf-core-keyvault-mgmt" --query objectId --output tsv)
            KeyVaultScope=$(az keyvault show --resource-group $RGname --query id --output tsv)

            if [ "${{parameters.country_code}}" == "GB-Commercial" ]; then
              az role assignment create --role "Key Vault Administrator" --assignee "1f3fbac3-31a5-4346-bec7-3e8cca6d1e77" --scope $KeyVaultScope --assignee-principal-type "ForeignGroup"
              az role assignment create --role "Key Vault Administrator" --assignee $GroupObjectIdKey --scope $KeyVaultScope
              echo "Key Vault ${{parameters.country_code}} (IAM access) settings updated successfully."
            elif [ "${{parameters.country_code}}" == "IT-Commercial" ]; then
              az role assignment create --role "Key Vault Administrator" --assignee "dd89b7bf-9972-41e0-90ab-9692c9756887" --scope $KeyVaultScope --assignee-principal-type "ForeignGroup"
              az role assignment create --role "Key Vault Administrator" --assignee $GroupObjectIdKey --scope $KeyVaultScope
              echo "Key Vault ${{parameters.country_code}} (IAM access) settings updated successfully."
            elif [ "${{parameters.country_code}}" == "IE-Commercial" ]; then
              az role assignment create --role "Key Vault Administrator" --assignee "e47928d8-7dd3-498f-8ceb-fa17870638c7" --scope $KeyVaultScope --assignee-principal-type "ForeignGroup"
              az role assignment create --role "Key Vault Administrator" --assignee $GroupObjectIdKey --scope $KeyVaultScope
              echo "Key Vault ${{parameters.country_code}} (IAM access) setting updated successfully."
            elif [ "${{parameters.country_code}}" == "ES-Commercial" ]; then
              az role assignment create --role "Key Vault Administrator" --assignee "78d91dcc-fc20-41b7-a8ad-6c12d8f6d7ff" --scope $KeyVaultScope --assignee-principal-type "ForeignGroup"
              az role assignment create --role "Key Vault Administrator" --assignee $GroupObjectIdKey --scope $KeyVaultScope
              echo "Key Vault ${{parameters.country_code}} (IAM access) setting updated successfully."
            elif [ "${{parameters.country_code}}" == "PT-Commercial" ]; then
              az role assignment create --role "Key Vault Administrator" --assignee "2a5dc68f-8c5f-4c4d-87aa-fe0771ef3d4f" --scope $KeyVaultScope --assignee-principal-type "ForeignGroup"
              az role assignment create --role "Key Vault Reader" --assignee "a0f138ea-7f3c-4b3d-a83c-4ee823e14167" --scope $KeyVaultScope --assignee-principal-type "ForeignGroup"
              az role assignment create --role "Key Vault Administrator" --assignee $GroupObjectIdKey --scope $KeyVaultScope
              echo "Key Vault ${{parameters.country_code}} (IAM access) setting updated successfully."
            fi
      displayName: 'Update IAM Access for Key Vault'

- stage: EntraIDDiagnosticSettings
  jobs:
    - job: CreateDiagnosticSettings
      steps:
        - script: |
            az login --service-principal -u ${{parameters.customer_client_id}} -p ${{parameters.customer_client_secret}} --tenant ${{parameters.customer_tenant_id}}
            az account set -s ${{parameters.customer_subscription_id}}
  
            AADToken=$(az account get-access-token --resource-type ms-graph --query accessToken --output tsv)
            EntraapiEndpoint="https://management.azure.com/providers/microsoft.aadiam/diagnosticSettings/vf-core-audit-logs-aad?api-version=2017-04-01-preview"
            subscriptionId=$(az account show --query id --output tsv)
            header="Authorization: Bearer $AADToken"

            RGname=$(az group list --query "[?contains(name, 'vf-core-') && contains(name, '-resources-rg')].name | [0]" --output tsv)
            StorageAccount=$(az storage account list --resource-group $RGname --query '[0].name' --output tsv)
            LogAnalytics="vf-core-log-analytics"

            read -r -d '' Entrabody << EOM
            {
              "properties": {
                "logs": [
                  { "category": "AuditLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "ProvisioningLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "NonInteractiveUserSignInLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "RiskyUsers", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "UserRiskEvents", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "NetworkAccessTrafficLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "RiskyServicePrincipals", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "ServicePrincipalRiskEvents", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "EnrichedOffice365AuditLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "MicrosoftGraphActivityLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "ServicePrincipalSignInLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "ManagedIdentitySignInLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } },
                  { "category": "ADFSSignInLogs", "enabled": true, "retentionPolicy": { "days": 0, "enabled": false } }
                ],
                "metrics": [],
                "storageAccountId": "/subscriptions/$subscriptionId/resourceGroups/$RGname/providers/Microsoft.Storage/storageAccounts/$StorageAccount",
                "workspaceId": "/subscriptions/$subscriptionId/resourceGroups/$RGname/providers/Microsoft.OperationalInsights/workspaces/$LogAnalytics"
              }
            }
            EOM
  
            # Pause script for 5 seconds
            sleep 5
  
            # Make API request
            Entraresponse=$(curl -X PUT -H "$header" -H "Content-Type: application/json" -d "$Entrabody" $EntraapiEndpoint)
  
            # Display success message
            echo "Diagnostic settings created successfully."
      displayName: 'Create Diagnostic Settings'

- stage: SetupContinuousExport
  jobs:
    - job: ConfigureExport
      steps:
        - script: |
            az login --service-principal -u "${{parameters.customer_client_id}}" -p "${{parameters.customer_client_secret}}" --tenant "${{parameters.customer_tenant_id}}"
            az account set -s "${{parameters.customer_subscription_id}}"
    
            # Retrieve the required variables
            subscriptionId=$(az account show --query id --output tsv)
            RGname=$(az group list --query "[?contains(name, 'vf-core-') && contains(name, '-resources-rg')].name | [0]" --output tsv)
            RGLocation=$(az group show --name "$RGname" --query location --output tsv)
            StorageAccount=$(az storage account list --resource-group "$RGname" --query '[0].name' --output tsv)
            LogAnalytics="vf-core-log-analytics"
            AADToken=$(az account get-access-token --resource-type ms-graph --query accessToken --output tsv)
    
            # Define API endpoint and header
            ContiniousExportEndpoint="https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$RGname/providers/Microsoft.Security/automations/ExportToWorkspace?api-version=2019-01-01-preview"
            header="Authorization: Bearer $AADToken"
    
            # Define the body for the API request
            read -r -d '' ContiniousExportbody << EOM
            {
              "properties": {
                "description": "",
                "isEnabled": true,
                "scopes": [
                  {
                    "description": "scope for subscription $subscriptionId",
                    "scopePath": "/subscriptions/$subscriptionId"
                  }
                ],
                "sources": [
                  { "eventSource": "Assessments", "ruleSets": [
                      { "rules": [
                          { "propertyJPath": "type", "propertyType": "String", "expectedValue": "Microsoft.Security/assessments", "operator": "Contains" },
                          { "propertyJPath": "properties.metadata.severity", "propertyType": "String", "expectedValue": "medium", "operator": "Equals" }
                      ]},
                      { "rules": [
                          { "propertyJPath": "type", "propertyType": "String", "expectedValue": "Microsoft.Security/assessments", "operator": "Contains" },
                          { "propertyJPath": "properties.metadata.severity", "propertyType": "String", "expectedValue": "high", "operator": "Equals" }
                      ]}
                  ]},
                  { "eventSource": "SubAssessments", "ruleSets": [
                      { "rules": [
                          { "propertyJPath": "properties.status.severity", "propertyType": "String", "expectedValue": "medium", "operator": "Equals" }
                      ]},
                      { "rules": [
                          { "propertyJPath": "properties.status.severity", "propertyType": "String", "expectedValue": "high", "operator": "Equals" }
                      ]}
                  ]},
                  { "eventSource": "Alerts", "ruleSets": [
                      { "rules": [
                          { "propertyJPath": "Severity", "propertyType": "String", "expectedValue": "medium", "operator": "Equals" }
                      ]},
                      { "rules": [
                          { "propertyJPath": "Severity", "propertyType": "String", "expectedValue": "high", "operator": "Equals" }
                      ]}
                  ]}
                ],
                "actions": [
                  {
                    "workspaceResourceId": "/subscriptions/$subscriptionId/resourcegroups/$RGname/providers/microsoft.operationalinsights/workspaces/$LogAnalytics",
                    "actionType": "Workspace"
                  }
                ]
              },
              "name": "ExportToWorkspace",
              "type": "Microsoft.Security/automations",
              "location": "$RGLocation",
              "tags": {}
            }
            EOM
    
            # Pause script for 5 seconds
            sleep 5
    
            # Make API request
            continousExportResponse=$(curl -X PUT -H "$header" -H "Content-Type: application/json" -d "$ContiniousExportbody" "$ContiniousExportEndpoint")
    
            # Display success message
            echo "Continuous export settings created successfully."
      displayName: 'Create Continuous Export Settings'