trigger:
- none
parameters:
- name: location
  displayName: "Azure region"
  type: string
  default: 'eastus'

- name: customer_client_id
  displayName: "Customer Client ID"
  type: string
  default: "ad019710-d8a6-46ad-add7-c05a9e9da443"

- name: customer_client_secret
  displayName: "Customer Client Secret"
  type: string
  default: "viG8Q~afrRrjdtZOEaQzTnEFLw1ThJqMkSPendfj"
  
- name: customer_tenant_id
  displayName: "Customer Tenant ID"
  type: string
  default: "e22861cb-ba60-48a7-8d82-fa8e4267a5bd"

- name: customer_subscription_id
  displayName: "Customer Subscription ID"
  type: string
  default: "f5980816-b478-413b-ae0b-5fb6d820a88f"
  
- name: default_domain_name
  displayName: "Default Domain Name"
  type: string
  default: "mohamedomar18live"

- name: customer_subscription_owner_first_name
  displayName: "Subscription Owner First Name"
  type: string
  default: "devops"

# - name: customer_subscription_owner_last_name 
#   displayName: "Subscription Owner Last Name"
#   type: string
#   default: "1"

stages:
- stage: TerraformRun
  displayName: 'Terraform Run'
  pool: default
  jobs:
    - job: TerraformRun
      displayName: 'Terraform Run'
      steps:
        - script: |
            echo "Location: ${{ parameters.location }}"
            dateYMD=$(date +%Y%m%dT%H%M%S%NZ)
            workspace=my_workspace_${dateYMD}
            echo $dateYMD
            terraform workspace new $workspace
            terraform init
            terraform plan -var customer_subscription_id=${{ parameters.customer_subscription_id }} -var customer_client_id=${{ parameters.customer_client_id}} -var customer_tenant_id=${{ parameters.customer_tenant_id }} -var customer_client_secret=${{ parameters.customer_client_secret }} -var location=${{ parameters.location }} -var domain_name=${{parameters.default_domain_name}} -var customer_subscription_owner_first_name=${{parameters.customer_subscription_owner_first_name}} -var customer_subscription_owner_last_name=$(date +%S) -out=tfplan

            terraform apply --auto-approve -var customer_subscription_id=${{ parameters.customer_subscription_id }} -var customer_client_id=${{ parameters.customer_client_id}} -var customer_tenant_id=${{ parameters.customer_tenant_id }} -var customer_client_secret=${{ parameters.customer_client_secret }} -var location=${{ parameters.location }} -var domain_name=${{parameters.default_domain_name}} -var customer_subscription_owner_first_name=${{parameters.customer_subscription_owner_first_name}} -var customer_subscription_owner_last_name=$(date +%S)  

            terraform output "customer_subscription_owner_password"
            terraform output "customer_subscription_owner_password" | sed 's/^"//;s/"$//' > ${{ parameters.default_domain_name}}_pass.txt
            terraform output "user_principal_name" 
            terraform output "user_principal_name" | sed 's/^"//;s/"$//' > ${{ parameters.default_domain_name}}_princ.txt
            cat ${{ parameters.default_domain_name}}_princ.txt
            cat ${{ parameters.default_domain_name}}_pass.txt
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: "${{ parameters.default_domain_name}}_pass.txt"
            artifact: "${{ parameters.default_domain_name}}_pass"
            publishLocation: 'pipeline'
        - task: PublishPipelineArtifact@1
          inputs:
              targetPath: "${{ parameters.default_domain_name}}_princ.txt"
              artifact: "${{ parameters.default_domain_name}}_princ"
              publishLocation: 'pipeline' 
- stage: savepassword
  dependsOn: TerraformRun
  jobs:
    - job: SavePASSToKeyVault
      displayName: "Save password to KeyVault"
      steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: "${{ parameters.default_domain_name}}_princ"
              targetPath: '$(Pipeline.Workspace)'
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: "${{ parameters.default_domain_name}}_pass"
              targetPath: '$(Pipeline.Workspace)'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'vf-cor-devops-pcr-access'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                ownerPass=$(cat '$(pipeline.workspace)/${{ parameters.default_domain_name}}_pass.txt')
                echo $ownerPass
                ownerprinc=$(cat '$(pipeline.workspace)/${{ parameters.default_domain_name}}_princ.txt')
                echo $ownerprinc
                seconds=$(date +%S)
                secret_pass_name=$(az keyvault secret set --vault-name 'vf-core-devops-pcr-kv' --name "${{parameters.default_domain_name}}-PASS-${seconds}" --value "$ownerPass" --query "name" --output tsv)
                echo $secret_pass_name
                echo secret_pass_name > secret_pass_name.txt
                secret_princ_name=$(az keyvault secret set --vault-name 'vf-core-devops-pcr-kv' --name "${{parameters.default_domain_name}}-PRINC-${seconds}" --value "$ownerprinc"  --query "name" --output tsv)
                echo $secret_princ_name
                echo secret_princ_name > secret_princ_name.txt

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "secret_pass_name.txt"
              artifact: "secret_pass_name"
              publishLocation: 'pipeline'
          - task: PublishPipelineArtifact@1 
            inputs:
              targetPath: "secret_princ_name.txt"
              artifact: "secret_princ_name"
              publishLocation: 'pipeline'
                
            
         
- stage: CleanUpEntraUser
  dependsOn: savepassword
  jobs:
    - job: ManualApprovalResourcesStep
      displayName: "Review and Approve EntraUser Cleanup"
      pool: server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: ''
          instructions: 'Please approve or reject the execution of EntraUser cleanup.'
 

    - job: CleanUpEntraUser
      displayName: "CleanUp EntraUser"
      dependsOn: ManualApprovalResourcesStep
      steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: "${{ parameters.default_domain_name}}_princ"
              targetPath: '$(Pipeline.Workspace)'
          - script: |
              ownerprinc=$(cat '$(pipeline.workspace)/${{ parameters.default_domain_name}}_princ.txt')
               echo $ownerprinc
               az login --service-principal -u ${{ parameters.customer_client_id}} -p  ${{ parameters.customer_client_secret}} --tenant ${{ parameters.customer_tenant_id}}
              az ad user delete --id $ownerprinc
            displayName: 'Delete EntraUser'

- stage: CleanUpKeyVault
  dependsOn: savepassword
  jobs:
    - job: ManualApprovalResourcesStep
      displayName: "Review and Approve Keyvault Cleanup"
      pool: server
      steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: ''
          instructions: 'Please approve or reject the execution of KeyVault cleanup.'
    - job: CleanUpKeyVault
      displayName: "CleanUpKeyVault"
      dependsOn: ManualApprovalResourcesStep
      steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: "secret_pass_name"
              targetPath: '$(Pipeline.Workspace)'
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: "secret_princ_name"
              targetPath: '$(Pipeline.Workspace)'
          - script: |
              secret_pass_name=$(cat '$(pipeline.workspace)/secret_pass_name.txt')
              echo $secret_pass_name
              secret_princ_name=$(cat '$(pipeline.workspace)/secret_princ_name.txt')
              echo $secret_princ_name
          - task: AzureCLI@2
            inputs:
                azureSubscription: 'vf-cor-devops-pcr-access'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                 echo $secret_pass_name
                  echo $secret_princ_name
                  az keyvault secret delete --vault-name 'vf-core-devops-pcr-kv' --name $secret_pass_name
                  az keyvault secret delete --vault-name 'vf-core-devops-pcr-kv' --name $secret_princ_name
                
                 displayName: 'CleanUpKeyVault'